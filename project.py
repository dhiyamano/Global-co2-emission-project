# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X5OFqgrkn7g7yIAdeKaFN3CeiuTJqgyJ
"""

import os
import pandas as pd
import numpy as np
INPUT_CSV = "Co2_Emissions_by_Sectors.csv"
OUT_DIR = "/content/emissions_tableau_ready"
os.makedirs(OUT_DIR, exist_ok=True)

df = pd.read_csv(INPUT_CSV)
print("Loaded rows,cols:", df.shape)
print("Columns:", df.columns.tolist())

df.columns = [c.strip().replace(" ", "_") for c in df.columns]

col_map = {
    "Co2_Emissions_MetricTons": "total_co2",
    "Energy_Consumption_TWh": "energy_twh",
    "Automobile_Co2_Emissions_MetricTons": "transport_co2",
    "Industrial_Co2_Emissions_MetricTons": "industry_co2",
    "Agriculture_Co2_Emissions_MetricTons": "agri_co2",
    "Domestic_Co2_Emissions_MetricTons": "domestic_co2",
    "Population_Millions": "population_millions",
    "GDP_Billion_USD": "gdp_billion_usd",
    "Country": "country",
    "Year": "year",
    "Region": "region"
}
df = df.rename(columns={k: v for k, v in col_map.items() if k in df.columns})

# coerce numeric fields
numeric_cols = ["total_co2","energy_twh","transport_co2","industry_co2","agri_co2","domestic_co2","population_millions","gdp_billion_usd"]
for c in numeric_cols:
    if c in df.columns:
        df[c] = pd.to_numeric(df[c], errors='coerce')

df = df.dropna(subset=["country","year","total_co2"]).copy()
df['year'] = df['year'].astype(int)

if 'population_millions' in df.columns:
    df['population_persons'] = df['population_millions'] * 1_000_000
    df['co2_per_capita_tons'] = df['total_co2'] / df['population_persons']
else:
    df['co2_per_capita_tons'] = np.nan

if 'gdp_billion_usd' in df.columns:
    df['gdp_usd'] = df['gdp_billion_usd'] * 1_000_000_000
    df['co2_per_usd_ton'] = df['total_co2'] / df['gdp_usd'].replace({0:np.nan})
    df['co2_per_1000usd_tons'] = df['co2_per_usd_ton'] * 1000
else:
    df['co2_per_1000usd_tons'] = np.nan

for c in ["transport_co2","industry_co2","agri_co2","domestic_co2"]:
    if c not in df.columns:
        df[c] = np.nan

df['known_sectors_sum'] = df[['transport_co2','industry_co2','agri_co2','domestic_co2']].sum(axis=1, skipna=True)
df['energy_co2_residual'] = df['total_co2'] - df['known_sectors_sum']

def pick_energy(row):
    resid = row['energy_co2_residual']
    if pd.notna(resid) and resid >= 0 and resid <= row['total_co2'] * 1.2:
        return (resid, "residual")
    if 'energy_twh' in row.index and pd.notna(row['energy_twh']):
        return (np.nan, "proxy_needed")
    return (np.nan, "missing")

energy_vals = df.apply(pick_energy, axis=1)
df['energy_co2'] = [v[0] for v in energy_vals]
df['energy_flag'] = [v[1] for v in energy_vals]

if 'energy_twh' in df.columns:
    df['total_twh_year'] = df.groupby('year')['energy_twh'].transform('sum')
    df['twh_share'] = df['energy_twh'] / df['total_twh_year'].replace({0:np.nan})
    df['total_co2_year'] = df.groupby('year')['total_co2'].transform('sum')
    df['energy_co2_proxy'] = df['twh_share'] * df['total_co2_year']
    proxy_mask = (df['energy_flag'] == 'proxy_needed') | (df['energy_co2'].isna() & df['energy_co2_proxy'].notna())
    df.loc[proxy_mask, 'energy_co2'] = df.loc[proxy_mask, 'energy_co2_proxy']
    df.loc[proxy_mask & df['energy_co2_proxy'].notna(), 'energy_flag'] = 'proxy_twh'
df['energy_co2'] = pd.to_numeric(df['energy_co2'], errors='coerce')

df['energy_share'] = df['energy_co2'] / df['total_co2'].replace({0:np.nan})
df['transport_share'] = df['transport_co2'] / df['total_co2'].replace({0:np.nan})
df['industry_share'] = df['industry_co2'] / df['total_co2'].replace({0:np.nan})
df['agri_share'] = df['agri_co2'] / df['total_co2'].replace({0:np.nan})
df['domestic_share'] = df['domestic_co2'] / df['total_co2'].replace({0:np.nan})

cleaned_path = os.path.join(OUT_DIR, "emissions_cleaned.csv")
df.to_csv(cleaned_path, index=False)

sector_map = [
    ('energy_co2', 'Energy'),
    ('transport_co2', 'Transport'),
    ('industry_co2', 'Industry'),
    ('agri_co2', 'Agriculture'),
    ('domestic_co2', 'Domestic')
]

long_frames = []
for col, label in sector_map:
    if col in df.columns:
        tmp = df[['country','year']].copy()
        if 'region' in df.columns:
            tmp['region'] = df['region'].values
        tmp['sector'] = label
        tmp['sector_co2'] = df[col].values
        tmp['total_co2'] = df['total_co2'].values
        tmp['co2_per_capita_tons'] = df['co2_per_capita_tons'].values
        tmp['co2_per_1000usd_tons'] = df['co2_per_1000usd_tons'].values
        tmp['energy_flag'] = df['energy_flag'].values
        long_frames.append(tmp)

long_df = pd.concat(long_frames, axis=0, ignore_index=True)
long_df = long_df.dropna(subset=['sector_co2']).copy()

long_path = os.path.join(OUT_DIR, "emissions_timeseries_long.csv")
long_df.to_csv(long_path, index=False)

try:
    long_xlsx = os.path.join(OUT_DIR, "emissions_timeseries_long.xlsx")
    cleaned_xlsx = os.path.join(OUT_DIR, "emissions_cleaned.xlsx")
    with pd.ExcelWriter(cleaned_xlsx, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='cleaned')
    with pd.ExcelWriter(long_xlsx, engine='openpyxl') as writer:
        long_df.to_excel(writer, index=False, sheet_name='long')
    print("Saved XLSX files.")
except Exception:
    pass

print("Saved cleaned:", cleaned_path)
print("Saved long-form:", long_path)
print("Rows in long file:", len(long_df))